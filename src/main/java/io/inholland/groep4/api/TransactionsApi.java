/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.25).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.inholland.groep4.api;

import io.inholland.groep4.api.model.Transaction;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-05-24T18:28:14.004Z[GMT]")
@Validated
public interface TransactionsApi {

    @Operation(summary = "Get specific transaction", description = "Get specific transaction", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Customers", "Employees" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Getting transaction successful", content = @Content(schema = @Schema(implementation = Transaction.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad input parameter(s)"),
        
        @ApiResponse(responseCode = "401", description = "JWT Bearer Token is missing or invalid"),
        
        @ApiResponse(responseCode = "403", description = "You are forbidden to view this content"),
        
        @ApiResponse(responseCode = "404", description = "Item not found") })
    @RequestMapping(value = "/transactions/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Transaction> getSpecificTransaction(@Parameter(in = ParameterIn.PATH, description = "The transaction ID", required=true, schema=@Schema()) @PathVariable("id") Integer id, @Parameter(in = ParameterIn.HEADER, description = "" ,required=true,schema=@Schema()) @RequestHeader(value="Bearer Token", required=true) String bearerToken);


    @Operation(summary = "Get transactions", description = "Get transactions", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Customers", "Employees" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Getting transactions successful", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Transaction.class)))),
        
        @ApiResponse(responseCode = "400", description = "Bad input parameter(s)"),
        
        @ApiResponse(responseCode = "401", description = "JWT Bearer Token is missing or invalid"),
        
        @ApiResponse(responseCode = "403", description = "You are forbidden to view this content"),
        
        @ApiResponse(responseCode = "404", description = "Item not found") })
    @RequestMapping(value = "/transactions",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Transaction>> getTransactions(@Parameter(in = ParameterIn.HEADER, description = "" ,required=true,schema=@Schema()) @RequestHeader(value="Bearer Token", required=true) String bearerToken);


    @Operation(summary = "Create transaction", description = "Create transactions", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Customers", "Employees" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Creating transactions successful", content = @Content(schema = @Schema(implementation = Transaction.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad input parameter(s)"),
        
        @ApiResponse(responseCode = "401", description = "JWT Bearer Token is missing or invalid"),
        
        @ApiResponse(responseCode = "403", description = "You are forbidden to view this content"),
        
        @ApiResponse(responseCode = "404", description = "Item not found") })
    @RequestMapping(value = "/transactions",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Transaction> postTransactions(@Parameter(in = ParameterIn.HEADER, description = "" ,required=true,schema=@Schema()) @RequestHeader(value="Bearer Token", required=true) String bearerToken, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody Transaction body);

}

